@page "/"
@using MudBlazor
@using RivalCoins.Sdk
@using RivalCoins.Sdk.Grpc
@using stellar_dotnet_sdk
@using stellar_dotnet_sdk.responses
@using System.IO

@inject IJSRuntime JS;
@inject RivalCoinsService.RivalCoinsServiceClient RivalCoinsClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IRivalCoinsApp App
@inject HttpClient Http

<br />
@if (_showPassword)
{
    <MudText>Your Password</MudText>
    <input id="password" type="password" placeholder="Your Password" @bind="@Password" />
    <br />
    <br />
}
@if (_showLoginButton)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnLogin">Login</MudButton>
    <br />
    <br />
}
@if (_showCreateWalletButton)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnCreateWallet">Create Account</MudButton>
    <br />
    <br />
}
@if (false && _showAirDrop)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnAirDrop">Gimme dat MONEY!</MudButton>
    <br />
    <br />
}
@if(_showTaxHonoring)
{
    <MudText>
        Honor My Sales Tax Payment
        <InputFile id="fileInput" OnChange="@LoadFiles" accept=".png" hidden multiple />

        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Filled.CloudUpload"
                   for="fileInput">
            Upload Receipt
        </MudButton>
    </MudText>
<br />
<br />
}
<MudText>Debug: @Debug</MudText>
<br />
<br />
<MudText>Address: @RecipientAddress</MudText>
<br />
<br />
<MudText>Stellar Balance: @StellarBalance</MudText>
<br />
<br />
<MudText>Play MONEY Balance: @PlayMoneyBalance</MudText>
<br />
<br />
<MudText>Play USA Balance: @PlayUsaBalance</MudText>
<br />
<br />
<MudText>Rival Coins</MudText>
<MudList Clickable="true">
    @foreach (var rivalCoin in _swapOutCoins)
    {
        <MudListItem>
            <img width="30" height="30" src="@rivalCoin.IconUri"/> @($"{rivalCoin.Name} - {rivalCoin.Quantity:N7}")
        </MudListItem>
    }
</MudList>
<hr />
<MudText>Swap Rival Coins!</MudText>
<MudGrid>
    <MudItem xs="12" sm="6">
        <MudContainer>
            <MudSelect T="RivalCoin" Label="Swap Out" @bind-Value=@SelectedSwapOut Variant="Variant.Outlined">
                @foreach (var rivalCoin in _swapOutCoins)
                {
                    <MudSelectItem Value="@rivalCoin">
                        <img width="30" height="30" src="@rivalCoin.IconUri"/> @($"{rivalCoin.Name}")
                    </MudSelectItem>
                }
            </MudSelect>
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">@SelectedSwapOut?.Description</MudPaper>
        </MudContainer>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudContainer>
            <MudSelect T="RivalCoin" Label="Swap In" @bind-Value=@SelectedSwapIn Variant="Variant.Outlined">
                @foreach (var rivalCoin in _swapInCoins)
                {
                    <MudSelectItem Value="@rivalCoin">
                        <img width="30" height="30" src="@rivalCoin.IconUri"/> @($"{rivalCoin.Name}")
                    </MudSelectItem>
                }
            </MudSelect>
            <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">@SelectedSwapIn?.Description</MudPaper>
        </MudContainer>
    </MudItem>
</MudGrid>
<MudTextField T="double" Label="Amount" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value=@_swapAmount></MudTextField>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnSwapCoins">Swap</MudButton>

@code
{
    private string RecipientAddress { get; set; }
    private string Debug { get; set; }
    private string SignedTx { get; set; }
    private string StellarBalance { get; set; }
    private string PlayMoneyBalance { get; set; }
    private string PlayUsaBalance { get; set; }
    private bool _showCreateWalletButton;
    private bool _showLoginButton;
    private bool _showPassword;
    private bool _showAirDrop;
    private bool _showTaxHonoring;
    private readonly List<RivalCoin> _swapOutCoins = new List<RivalCoin>();
    private readonly List<RivalCoin> _swapInCoins = new List<RivalCoin>();
    private List<RivalCoin> _swappableCoins = new List<RivalCoin>();
    private RivalCoin SelectedSwapOut { get; set; }
    private RivalCoin SelectedSwapIn { get; set; }
    private double _swapAmount;
    private AssetTypeCreditAlphaNum _playUSA;
    private AssetTypeCreditAlphaNum _playMONEY;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        this.Debug = "Receiving Rival Coins' honor of your tax contribution...";

        await this.App.GetTaxContributionHonorAsync(e.File.OpenReadStream());

        this.Debug = "Received Rival Coins' honor of your tax contribution!";

        await this.RefreshBalancesAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        _showCreateWalletButton = !await this.LocalStorage.ContainKeyAsync("SecretSeed");
        _showLoginButton = !_showCreateWalletButton;
        _showPassword = true;

        _ = this.LoadSwappableCoinsAsync();

        var rivalCoins = await Wallet.GetRivalCoinsAsync(this.App.Network);
        _playUSA = rivalCoins.FirstOrDefault(rivalCoin => rivalCoin.Asset.Code == "PlayUSA").Asset;
        _playMONEY = rivalCoins.FirstOrDefault(rivalCoin => rivalCoin.Asset.Code == "PlayMONEY").Asset;
    }

    private async Task LoadSwappableCoinsAsync()
    {
        _swappableCoins = new List<RivalCoin>(await this.App.GetSwappableCoinsAsync());

        _swapInCoins.AddRange(_swappableCoins.Where(asset => asset.Asset.Code() != "USDC"));
    }

    private async Task OnLogin()
    {
        // ensure password entered
        if (string.IsNullOrEmpty(this.Password))
        {
            this.Debug = "Please enter password!";
            return;
        }

        // restore wallet
        var walletSuccessfullyRestored = await this.App.RestoreWalletAsync(this.Password);

        // validate login
        this.RecipientAddress = this.App.GetPublicAddress();
        if(this.RecipientAddress != null)
        {
            _showLoginButton = _showPassword = false;

            if (walletSuccessfullyRestored)
            {
                // show balances
                await this.RefreshBalancesAsync();

                _showCreateWalletButton = false;
                _showTaxHonoring = true;
            }
            else if(this.App.Network != Sdk.Network.Mainnet)
            {
                _showCreateWalletButton = true;
            }
        }
    }

    private async Task OnSwapCoins()
    {
        this.Debug = "Swapping coins...";
        await this.App.SwapAysnc(this.SelectedSwapOut, this.SelectedSwapIn, _swapAmount);
        this.Debug = "Coins swapped!";

        this.Debug = "Refreshing balances...";
        await this.RefreshBalancesAsync();
        this.Debug = "Balances refreshed!";
    }

    private async Task RefreshBalancesAsync()
    {
        var balances = await this.App.GetBalancesAsync();

        var xlmBalance = balances.First(balance => balance.AssetType == "native");
        var playUSABalance = balances.FirstOrDefault(balance => balance.Asset.CanonicalName() == _playUSA.CanonicalName());
        var playMONEYBalance = balances.FirstOrDefault(balance => balance.Asset.CanonicalName() == _playMONEY.CanonicalName());

        this.StellarBalance = double.Parse(xlmBalance.BalanceString).ToString("N7");
        this.PlayUsaBalance = double.Parse(playUSABalance?.BalanceString ?? 0.0.ToString()).ToString("N7");
        this.PlayMoneyBalance = double.Parse(playMONEYBalance?.BalanceString ?? 0.0.ToString()).ToString("N7");

        // update swap out coins
        _swapOutCoins.Clear();
        foreach (var balance in balances.Where(b => b != xlmBalance && double.Parse(b.BalanceString) != 0.0))
        {
            var swapOutCoin = _swappableCoins.FirstOrDefault(coin => coin.Asset.CanonicalName() == balance.Asset.CanonicalName());
            if (swapOutCoin != null)
            {
                _swapOutCoins.Add(swapOutCoin with { Quantity = double.Parse(balance.BalanceString) });
            }
        }

        base.StateHasChanged();
    }

    private async Task OnAirDrop()
    {
        await this.App.AirDropAsync();
        await RefreshBalancesAsync();
    }

    private async Task OnCreateWallet()
    {
        // ensure password entered
        if (string.IsNullOrEmpty(this.Password))
        {
            this.Debug = "Please enter password!";
            return;
        }

        this.Debug = "Creating account...";
        await this.App.CreateWalletAsync(this.Password);
        this.Debug = "Account created!";

        // show current balances
        this.Debug = "Refreshing balances...";
        await this.RefreshBalancesAsync();
        this.Debug = "Balances refreshed!";

        _showCreateWalletButton = _showLoginButton = _showPassword = false;
        _showAirDrop = true;
    }

    public string? Password { get; set; }
}
